openapi: 3.0.3

info:
  title: Stage Technologies, Inc. API
  description: |-
    Stage Technologies, Inc. API

    Useful links:
    - [Stage](https://www.heystage.com/)
  termsOfService: https://docs.heystage.com/docs/legal/tos
  contact:
    name: "Stage Technologies, Inc."
    url: https://www.heystage.com/
    email: stage@heystage.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.42

externalDocs:
  description: Stage documentation
  url: https://docs.heystage.com

servers:
  - url: https://api.heystage.com/sdk-api
  - url: http://localhost:8080/sdk-api

tags:
  - name: stage # Generated class name is based on the tag; here, it's StageApi.
    description: "Stage API"
    externalDocs:
      description: "Stage API"
      url: https://docs.heystage.com/docs
  - name: Organizations # Generated class name is based on the tag; here, it's StageApi.
    description: "Organizations"
    externalDocs:
      description: "Stage API"
      url: https://docs.heystage.com/docs
  - name: Users # Generated class name is based on the tag; here, it's StageApi.
    description: "Users"
    externalDocs:
      description: "Stage API"
      url: https://docs.heystage.com/docs
  - name: Billing # Generated class name is based on the tag; here, it's StageApi.
    description: "Billing"
    externalDocs:
      description: "Stage API"
      url: https://docs.heystage.com/docs

paths:
  /organizations:
    post:
      operationId: createOrganization
      summary: Create organization
      description: Creates a new organization
      tags:
        - Organizations
        - stage
      security:
        - StageApiKey: []
      requestBody:
        content:
          application/vnd.heystage.v1+json:
            schema:
              $ref: "#/components/schemas/CreateOrganizationArg"
      responses:
        "201":
          description: "Created"
          content:
            application/vnd.heystage.v1+json:
              schema:
                $ref: "#/components/schemas/Organization"
          headers:
            Location:
              schema:
                type: string
                description: The URL to the newly created organization, which is also returned in the response body.
        "403":
          description: "Forbidden"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /organizations/{organizationIdentifier}/users:
    post:
      operationId: createOrganizationUser
      summary: Creates organization user
      description: Creates an organization user.
      tags:
        - Organizations
        - stage
      parameters:
        - $ref: "#/components/parameters/OrganizationIdentifierParameter"
      security:
        - StageApiKey: []
      requestBody:
        content:
          application/vnd.heystage.v1+json:
            schema:
              $ref: "#/components/schemas/CreateOrganizationUserArg"
      responses:
        "201":
          description: "Created"
          content:
            application/vnd.heystage.v1+json:
              schema:
                $ref: "#/components/schemas/User"
          headers:
            Location:
              schema:
                type: string
                description: The URL to the newly created organization user, which is also returned in the response body.
        "403":
          description: "Forbidden"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /organizations/{organizationIdentifier}/merge:
    put:
      operationId: mergeOrganization
      summary: Merge organization
      description: Merges an organization to another, and as a result, migrates all of that organization's users to the new organization.
      tags:
        - Organizations
        - stage
      parameters:
        - $ref: "#/components/parameters/OrganizationIdentifierParameter"
      security:
        - StageApiKey: []
      requestBody:
        content:
          application/vnd.heystage.v1+json:
            schema:
              $ref: "#/components/schemas/MergeOrganizationArg"
      responses:
        "200":
          description: "OK"
          content:
            application/vnd.heystage.v1+json:
              schema:
                $ref: "#/components/schemas/Organization"
        "403":
          description: "Forbidden"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /organizations/{organizationIdentifier}:
    get:
      operationId: getOrganization
      summary: Get organization
      description: Gets an organization
      tags:
        - Organizations
        - stage
      parameters:
        - $ref: "#/components/parameters/OrganizationIdentifierParameter"
      security:
        - StageApiKey: []
      responses:
        "200":
          description: "OK"
          content:
            application/vnd.heystage.v1+json:
              schema:
                $ref: "#/components/schemas/Organization"
        "403":
          description: "Forbidden"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /organizations/{organizationIdentifier}/plans:
    get:
      operationId: getOrganizationPlans
      summary: Get organization plans
      description: Gets an organization along with plans that are applicable to that organization
      tags:
        - Organizations
        - stage
      parameters:
        - $ref: "#/components/parameters/OrganizationIdentifierParameter"
      security:
        - StageApiKey: []
      responses:
        "200":
          description: OK
          content:
            application/vnd.heystage.v1+json:
              schema:
                $ref: "#/components/schemas/OrganizationPlans"
        "403":
          description: "Forbidden"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /organizations/plans:
    get:
      operationId: getPlansForOrganizations
      summary: List organization plans
      description: Gets plans for organizations. This is similar to GET /organizations/{organizationIdentifier}/plans, except that this returns organization plans only.
      tags:
        - Organizations
        - stage
      security:
        - StageApiKey: []
      responses:
        "200":
          description: OK
          content:
            application/vnd.heystage.v1+json:
              schema:
                $ref: "#/components/schemas/Plans"
        "403":
          description: "Forbidden"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /users:
    post:
      operationId: createUser
      summary: Create user
      description: Creates a user.
      tags:
        - Users
        - stage
      security:
        - StageApiKey: []
      requestBody:
        content:
          application/vnd.heystage.v1+json:
            schema:
              $ref: "#/components/schemas/CreateUserArg"
      responses:
        "201":
          description: "Created"
          content:
            application/vnd.heystage.v1+json:
              schema:
                $ref: "#/components/schemas/User"
          headers:
            Location:
              schema:
                type: string
                description: The URL to the newly created user, which is also returned in the response body.
        "403":
          description: "Forbidden"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /users/{userIdentifier}:
    get:
      operationId: getUser
      summary: Get user
      description: Gets a user
      tags:
        - Users
        - stage
      parameters:
        - $ref: "#/components/parameters/UserIdentifierParameter"
      security:
        - StageApiKey: []
      responses:
        "200":
          description: OK
          content:
            application/vnd.heystage.v1+json:
              schema:
                $ref: "#/components/schemas/User"
        "403":
          description: "Forbidden"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    put:
      operationId: updateUser
      summary: Update a user
      description: Updates a user
      tags:
        - Users
        - stage
      parameters:
        - $ref: "#/components/parameters/UserIdentifierParameter"
      security:
        - StageApiKey: []
      requestBody:
        content:
          application/vnd.heystage.v1+json:
            schema:
              $ref: "#/components/schemas/UpdateUserArg"
      responses:
        "200":
          description: OK
          content:
            application/vnd.heystage.v1+json:
              schema:
                $ref: "#/components/schemas/User"
        "403":
          description: "Forbidden"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /users/{userIdentifier}/accesses:
    get:
      operationId: hasAccesses
      summary: Check user access
      description: Checks if a user has access to any features specified via `featureIdentifiers` or any features when `featureIdentifiers` is not specified.
      tags:
        - Users
        - stage
      parameters:
        - $ref: "#/components/parameters/UserIdentifierParameter"
        - $ref: "#/components/parameters/FeatureIdentifiersParameter"
      security:
        - StageApiKey: []
      responses:
        "200":
          description: OK
          content:
            application/vnd.heystage.v1+json:
              schema:
                $ref: "#/components/schemas/Accesses"
        "403":
          description: "Forbidden"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /users/{userIdentifier}/features/{featureIdentifier}/access:
    get:
      operationId: hasAccess
      summary: Check user access for feature
      description: Checks if a user has access to the feature identified by `featureIdentifier`.
      tags:
        - Users
        - stage
      parameters:
        - $ref: "#/components/parameters/UserIdentifierParameter"
        - $ref: "#/components/parameters/FeatureIdentifierParameter"
      security:
        - StageApiKey: []
      responses:
        "200":
          description: OK
          content:
            application/vnd.heystage.v1+json:
              schema:
                $ref: "#/components/schemas/Access"
        "403":
          description: "Forbidden"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    post:
      operationId: access
      summary: Register feature usage
      description: If a user accesses a feature, use this endpoint to increments its counter by one.
      tags:
        - Users
        - stage
      parameters:
        - $ref: "#/components/parameters/UserIdentifierParameter"
        - $ref: "#/components/parameters/FeatureIdentifierParameter"
      security:
        - StageApiKey: []
      responses:
        "200":
          description: OK
          content:
            application/vnd.heystage.v1+json:
              schema:
                $ref: "#/components/schemas/Access"
        "403":
          description: "Forbidden"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /users/{userIdentifier}/features/{featureIdentifier}/adjustAccessCount:
    put:
      operationId: adjustAccessCount
      summary: Adjusts feature access count
      description: Adjusts a feature's access count.
      tags:
        - Users
        - stage
      parameters:
        - $ref: "#/components/parameters/UserIdentifierParameter"
        - $ref: "#/components/parameters/FeatureIdentifierParameter"
      security:
        - StageApiKey: []
      requestBody:
        content:
          application/vnd.heystage.v1+json:
            schema:
              $ref: "#/components/schemas/AdjustAccessCountArg"
      responses:
        "200":
          description: OK
          content:
            application/vnd.heystage.v1+json:
              schema:
                $ref: "#/components/schemas/Access"
        "403":
          description: "Forbidden"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /users/{userIdentifier}/features/{featureIdentifier}/resetAccessCount:
    put:
      operationId: resetAccessCount
      summary: Reset feature access count
      description: Resets the features access count for the user.
      tags:
        - Users
        - stage
      parameters:
        - $ref: "#/components/parameters/UserIdentifierParameter"
        - $ref: "#/components/parameters/FeatureIdentifierParameter"
      security:
        - StageApiKey: []
      responses:
        "200":
          description: OK
          content:
            application/vnd.heystage.v1+json:
              schema:
                $ref: "#/components/schemas/Access"
        "403":
          description: "Forbidden"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /users/{userIdentifier}/plans:
    get:
      operationId: getUserPlans
      summary: Get user plans
      description: Gets a user along with plans that are applicable to that user
      tags:
        - Users
        - stage
      parameters:
        - $ref: "#/components/parameters/UserIdentifierParameter"
      security:
        - StageApiKey: []
      responses:
        "200":
          description: OK
          content:
            application/vnd.heystage.v1+json:
              schema:
                $ref: "#/components/schemas/UserPlans"
        "403":
          description: "Forbidden"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /users/plans:
    get:
      operationId: getPlansForUsers
      summary: List user plans
      description: Gets plans for users. This is similar to GET /users/{userIdentifier}/plans, except that this returns user plans only.
      tags:
        - Users
        - stage
      security:
        - StageApiKey: []
      responses:
        "200":
          description: OK
          content:
            application/vnd.heystage.v1+json:
              schema:
                $ref: "#/components/schemas/Plans"
        "403":
          description: "Forbidden"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /billing/organizations/{organizationIdentifier}/plans/{planIdentifier}/checkoutSessions:
    post:
      operationId: createOrganizationCheckoutSession
      summary: Create an organization checkout session
      description: Create an organization checkout session
      tags:
        - Billing
        - stage
      parameters:
        - $ref: "#/components/parameters/OrganizationIdentifierParameter"
        - $ref: "#/components/parameters/PlanIdentifierParameter"
      security:
        - StageApiKey: []
      requestBody:
        content:
          application/vnd.heystage.v1+json:
            schema:
              $ref: "#/components/schemas/CheckoutSessionArg"
      responses:
        "200":
          description: "Ok"
          headers:
            Location:
              schema:
                type: string
                description: The URL to the checkout session for the organization.
          content:
            application/vnd.heystage.v1+json:
              schema:
                $ref: "#/components/schemas/CheckoutSession"
        "403":
          description: "Forbidden"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /billing/users/{userIdentifier}/plans/{planIdentifier}/checkoutSessions:
    post:
      operationId: createUserCheckoutSession
      summary: Create a user checkout session
      description: Create a user checkout session
      tags:
        - Billing
        - stage
      parameters:
        - $ref: "#/components/parameters/UserIdentifierParameter"
        - $ref: "#/components/parameters/PlanIdentifierParameter"
      security:
        - StageApiKey: []
      requestBody:
        content:
          application/vnd.heystage.v1+json:
            schema:
              $ref: "#/components/schemas/CheckoutSessionArg"
      responses:
        "201":
          description: "Created"
          headers:
            Location:
              schema:
                type: string
                description: The URL to the checkout session for the user.
          content:
            application/vnd.heystage.v1+json:
              schema:
                $ref: "#/components/schemas/CheckoutSession"
        "403":
          description: "Forbidden"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
components:
  schemas:
    Accesses:
      type: object
      description: A list of access objects.
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Access"
    Access:
      type: object
      properties:
        identifier:
          description: The unique identifier of the feature.
          type: string
          nullable: false
          example: "createWidget"
        hasAccess:
          description: Whether the user has access to the feature.
          type: boolean
          nullable: false
          example: false
        count:
          description: Either the user's access count of the feature or the corresponding organization's access count of the feature thus far. This is `null` when featureIdentifier is invalid.
          type: integer
          nullable: true
          format: int32
          example: 15
        limit:
          description: Either the user's access count limit of the feature or the corresponding organization's access count limit of the feature thus far. This is `null` when featureIdentifier is invalid.
          type: integer
          nullable: true
          format: int32
          example: 15
        credit:
          description: Either the user's access count credit of the feature or the corresponding organization's access count credit of the feature thus far. This is `null` when featureIdentifier is invalid.
          type: integer
          nullable: true
          format: int32
          example: 0
        reason:
          description: When hasAccess is false, this provides the reason.
          type: string
          nullable: true
          enum:
            - EXCEED_LIMIT
            - FEATURE_IN_DIFFERENT_PLAN
            - FEATURE_NOT_FOUND
            - SUBSCRIPTION_EXPIRED
            - USER_DOES_NOT_EXIST
            - USER_NOT_SUBSCRIBED_TO_ANY_PLANS
          example: EXCEED_LIMIT
      xml:
        name: access
    AdjustAccessCountArg:
      type: object
      description: The amount by which the access count is to be adjusted. This can be a negative or a positive number. When the adjustment causes the count to be less than zero, the count will be set to zero.
      properties:
        amount:
          type: integer
          example: -1
    User:
      type: object
      properties:
        identifier:
          description: The unique identifier of the user.
          type: string
          nullable: false
          example: "joe@example.com"
        stripeCustomerId:
          description: Stripe customer ID of this user. For this end-point, stripeCustomerId is always `null`.
          type: string
          nullable: true
        planIdentifier:
          description: The plan identifier that the organization to which the user belongs is subscribed to or `null` if the organization is not subscribed to any plans.
          type: string
          nullable: true
          example: "pro"
        organizationIdentifer:
          description: The organization identifier to which this user belongs.
          type: string
          nullable: false
          example: "jpmc"
        roleIdentifier:
          description: The role identifier of the plan to which the user's organization is subscribed to.
          type: string
          nullable: false
          example: "admin"
    CreateUserArg:
      type: object
      required:
        - identifier
      properties:
        identifier:
          description: The unique identifier of the user.
          type: string
          nullable: false
        planIdentifier:
          description: The plan identifier that the user will be subscribed to or `null` if the user is not to be subscribed to any plans.
          type: string
          nullable: true
        isOnTrial:
          description: Set this to `null` when the subscription is a trial one. This is applicable only when planIdentifier is not `null`.
          type: boolean
          nullable: true
    UpdateUserArg:
      type: object
      properties:
        planIdentifier:
          description: The plan identifier that the user will be subscribed to. At least one of `planIdentifier` or `organizationIdentifier` must be specified.
          type: string
          nullable: true
          example: "pro"
        organizationIdentifier:
          description: The organization identifier to which this user will belong. At least one of `planIdentifier` or `organizationIdentifier` must be specified.
          type: string
          nullable: true
          example: null
        roleIdentifier:
          description: The role identifier of the plan to which the organization identified by `organizationIdentifier` is subscribed to. If this is set to `null` and `organizationIdentifier` is set, the default role will be assigned to the user.
          type: string
          nullable: true
          example: null
        isOnTrial:
          description: Set this to `null` when the subscription is a trial one. This is applicable only when planIdentifier is not `null`.
          type: boolean
          nullable: true
          example: null
    Plans:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Plan"
    CreateOrganizationUserArg:
      type: object
      required:
        - identifier
      properties:
        identifier:
          description: The unique identifier of the user.
          type: string
          nullable: false
          example: "joe@example.com"
        roleIdentifier:
          description: The role identifier of the plan to which the user's organization is subscribed to or `null` to set user's role to the default one.
          type: string
          nullable: true
          example: "admin"
    UserPlans:
      type: object
      properties:
        userIdentifier:
          description: The unique identifier of the user.
          type: string
          nullable: false
          example: "joe@example.com"
        planIdentifier:
          description: The plan identifier that the user is be subscribed to or null if the user is not subscribed to any plans.
          type: string
          nullable: true
          example: "pro"
        isOnTrial:
          description: Set this to null when the subscription is a trial one. This is applicable only when planIdentifier is not null.
          type: boolean
          nullable: true
        plans:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: "#/components/schemas/Plan"
    Plan:
      type: object
      properties:
        identifier:
          description: The unique identifier of this plan.
          type: string
          nullable: false
          example: "pro"
        name:
          description: Plan's name.
          type: string
          nullable: false
          example: "Pro Plan"
        description:
          description: Plan's description.
          type: string
          nullable: true
        stripeProductId:
          description: When applicable, the Stripe's product ID of this plan.
          type: string
          nullable: true
        monthlyStripePriceId:
          description: When applicable, the Stripe's price ID of this plan. A plan (and thus a Stripe's product) can have multiple Stripe prices, and this is the ID of the first price.
          type: string
          nullable: true
        monthlyCurrency:
          type: string
          nullable: true
          description: Lower case of ISO [4217](https://www.iso.org/iso-4217-currency-codes.html)
          example: "usd"
        monthlyUnitAmount:
          type: number
          nullable: true
          format: float
          description: When applicable, price's unit amount in cents.
          example: 1000
        monthlyPricingType:
          description: When applicable, price's type, which is either `one_time` or `recurring`
          type: string
          nullable: true
          enum:
            - one_time
            - recurring
          example: recurring
        yearlyStripePriceId:
          description: When applicable, the Stripe's price ID of this plan. A plan (and thus a Stripe's product) can have multiple Stripe prices, and this is the ID of the first price.
          type: string
          nullable: true
        yearlyCurrency:
          type: string
          nullable: true
          description: Lower case of ISO [4217](https://www.iso.org/iso-4217-currency-codes.html)
          example: "usd"
        yearlyUnitAmount:
          type: number
          nullable: true
          format: float
          description: When applicable, price's unit amount in cents.
          example: 1000
        yearlyPricingType:
          description: When applicable, price's type, which is either `one_time` or `recurring`
          type: string
          nullable: true
          enum:
            - one_time
            - recurring
          example: recurring
        draft:
          description: Whether this plan is in draft mode or not.
          type: boolean
          nullable: false
        features:
          description: A list of feature objects.
          type: object
          properties:
            items:
              type: array
              items:
                $ref: "#/components/schemas/Feature"
        isTrialEnabled:
          type: boolean
          nullable: false
      xml:
        name: plan
    Feature:
      type: object
      properties:
        identifier:
          description: The unique identifier of this feature.
          type: string
          nullable: false
          example: "createWidget"
        name:
          description: Feature's name.
          type: string
          nullable: false
          example: "Create Widget"
        description:
          description: Feature's description.
          type: string
          nullable: true
        limit:
          description: The feature's limit or null when there's no limit.
          type: integer
          nullable: true
          format: int32
          example: 15
        limitType:
          description: The feature's limit type or null when there's no limit. When applicable, the limit type is `USER` or `COMPANY_SHARED`
          type: string
          nullable: false
          enum:
            - USER
            - COMPANY_SHARED
          example: COMPANY_SHARED
        monthlyCurrency:
          type: string
          nullable: true
          description: Lower case of ISO [4217](https://www.iso.org/iso-4217-currency-codes.html)
          example: "usd"
        monthlyUnitAmount:
          type: number
          nullable: true
          format: float
          description: When applicable, monthly price's unit amount in cents.
          example: 1000
        monthlyUsageType:
          description: When applicable, monthly usage type, which is either `LICENSED` or `METERED`
          type: string
          nullable: true
          enum:
            - LICENSED
            - METERED
          example: METERED
        yearlyCurrency:
          type: string
          nullable: true
          description: Lower case of ISO [4217](https://www.iso.org/iso-4217-currency-codes.html)
          example: "usd"
        yearlyUnitAmount:
          type: number
          nullable: true
          format: float
          description: When applicable, yearly price's unit amount in cents.
          example: 1000
        yearlyUsageType:
          description: When applicable, yearly usage type, which is either `LICENSED` or `METERED`
          type: string
          nullable: true
          enum:
            - LICENSED
            - METERED
          example: METERED
      xml:
        name: feature
    Organization:
      type: object
      required:
        - identifier
        - name
      properties:
        identifier:
          description: The unique identifier of the organization.
          type: string
          nullable: false
          example: "acme"
        name:
          description: The name of the organization.
          type: string
          nullable: false
          example: "ACME, Inc."
        description:
          description: Organization's description.
          type: string
          nullable: true
        planIdentifier:
          description: The identifier of the plan to which the organization subscribes or `null` if the organization is not subscribed to any plans.
          type: string
          nullable: true
          example: "pro"
        mergedOrganizationIdentifier:
          description: The identifier of the organization to which this organization is merged, or `null` if this organization was never merged to any other.
          type: string
          nullable: true
    OrganizationPlans:
      type: object
      properties:
        organizationIdentifier:
          description: The unique identifier of the organization.
          type: string
          nullable: false
          example: "acme"
        planIdentifier:
          description: The plan identifier that the organization is be subscribed to or null if the organization is not subscribed to any plans.
          type: string
          nullable: true
          example: "pro"
        isOnTrial:
          description: Set this to `true` when the checkoutsession is for a trial subscription.
          type: boolean
          nullable: true
        plans:
          description: A list of plan objects. See "Plan model" below for more detail.
          type: object
          properties:
            items:
              type: array
              items:
                $ref: "#/components/schemas/Plan"
    CreateOrganizationArg:
      type: object
      properties:
        identifier:
          description: The unique identifier of the organization.
          type: string
          nullable: false
        name:
          description: The name of the organization.
          type: string
          nullable: false
        description:
          description: Organization's description.
          type: string
          nullable: true
        planIdentifier:
          description: The identifier of the plan to which the organization will be subscribed or null if the organization is not to be subscribed to any plans.
          type: string
          nullable: true
        isOnTrial:
          description: Set this to null when the subscription is a trial one. This is applicable only when planIdentifier is not null.
          type: boolean
          nullable: true
    MergeOrganizationArg:
      type: object
      required:
        - destinationOrganizationIdentifier
        - archiveSourceOrganization
      properties:
        destinationOrganizationIdentifier:
          description: The unique identifier of the destination organization to which this organization is merged.
          type: string
          nullable: false
          example: wayne_enterprises
        archiveSourceOrganization:
          description: Whether this organization should be archived once it has been merged to the destination organization.
          type: boolean
    CheckoutSessionArg:
      type: object
      required:
        - "successUrl"
        - "cancelUrl"
        - "billingInterval"
      properties:
        successUrl:
          description: Redirect URL upon success.
          type: string
          nullable: false
          example: "https://example.com/success"
        cancelUrl:
          description: Redirect URL upon cancelation.
          type: string
          nullable: false
          example: "https://example.com/cancel"
        billingInterval:
          description: Billing interval.
          type: string
          nullable: false
          enum:
            - MONTH
            - YEAR
          example: MONTH
        isOnTrial:
          type: boolean
          description: Set this to `true` when the checkoutsession is for a trial subscription.
          nullable: true
        collectPaymentMethodWhenTrialing:
          description: Set this to `true` when payment method is to be collected when the checkout session is for a trial subscription. This is applicable only when `isOnTrial` is set to `true`.
          nullable: true
          type: boolean
        vendorOptions:
          $ref: "#/components/schemas/VendorOptions"
    CheckoutSession:
      type: object
      properties:
        url:
          type: string
          nullable: false
    Problem:
      type: object
      properties:
        timestamp:
          type: integer
          nullable: false
        type:
          type: string
          nullable: true
          description: URI indicating error type.
          example: https://docs.heystage.com/docs/problem/forbidden
        status:
          type: integer
          nullable: false
          description: HTTP status code.
          example: 403
        title:
          type: string
          nullable: false
          description: Human-readable error title.
        detail:
          type: string
          nullable: false
          description: Human-readable error details.
          example: "User is not allowed to perform this action"
        errorCode:
          type: string
          nullable: false
          enum:
            - BAD_REQUEST
            - FORBIDDEN
            - FORM_VALIDATION_ERROR
            - INTERNAL_SERVER_ERROR
            - NOT_FOUND
            - UNAUTHORIZED
          description: Error code describing the error. When it's `FORM_VALIDATION_ERROR`, `fieldErrors` is populated.
        fieldErrors:
          type: array
          items:
            $ref: "#/components/schemas/FieldError"
      xml:
        name: problem
    FieldError:
      type: object
      properties:
        path:
          type: array
          nullable: false
          items:
            type: string
          description: The path to the faulty field, for example, `["user", "0", "identifier"]`.
        detail:
          type: string
          nullable: false
        errorCode:
          type: string
          nullable: false
          enum:
            - ALREADY_EXISTS
            - DEFINED
            - DUPLICATE
            - INVALID
            - NOT_DEFINED
            - NOT_FOUND
            - PLAN_TRIAL_NOT_ENABLED
      xml:
        name: fieldError
    VendorOptions:
      description: Additional options for specific billing vendors. See "VendorOptions model" for more detail.
      type: object
      nullable: true
      properties:
        stripeOptions:
          description: Options for stripe checkout sessions. See the [Stripe API documentation](https://stripe.com/docs/api/checkout/sessions) for detailed information.
          type: object
          nullable: true
          properties:
            allowDiscountCodes:
              description: Allow discount codes to applied at checkout
              type: boolean
              nullable: true
            billingAddressCollection:
              description: Selects whether to require billing address to be collected at checkout only when required (AUTO) or always (REQUIRED)
              type: string
              nullable: true
              enum:
                - AUTO
                - REQUIRED
            metadata:
              description: Attaches user-defined metadata to the checkout session object
              type: object
              nullable: true
              additionalProperties:
                type: string
            subscriptionData:
              description: Options for the subscription object
              type: object
              nullable: true
              properties:
                metadata:
                  description: Attaches user-defined metadata to the subscription object
                  type: object
                  nullable: true
                  additionalProperties:
                    type: string
  parameters:
    OrganizationIdentifierParameter:
      in: path
      name: organizationIdentifier
      required: true
      description: The unique identifier of the organization.
      schema:
        type: string
      example: "acme"
    PlanIdentifierParameter:
      in: path
      name: planIdentifier
      required: true
      description: "Plan identifier"
      schema:
        type: string
    UserIdentifierParameter:
      in: path
      name: userIdentifier
      required: true
      description: The unique identifier of the user. Please see [creating users in Stage](https://docs.heystage.com/docs/customer/users#creating-users-in-stage) for more information.
      schema:
        type: string
        example: "joe@example.com"
    FeatureIdentifierParameter:
      in: path
      name: featureIdentifier
      required: true
      description: "Feature identifier"
      schema:
        type: string
        example: "createWidget"
    FeatureIdentifiersParameter:
      description: The list of feature identifiers.
      in: query
      name: featureIdentifiers
      required: false
      schema:
        type: array
        default: []
        minItems: 0
        maxItems: 10
        items:
          type: string
          example: "createWidget"
        example: ["createWidget", "viewWidget"]
  securitySchemes:
    StageApiKey:
      type: http
      scheme: bearer
      description: 'Please enter the API key, excluding the \"Bearer\" portion. This API token can be obtained from Stage.'
